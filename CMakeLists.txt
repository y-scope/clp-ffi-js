cmake_minimum_required(VERSION 3.16)

include(FetchContent)

if(NOT CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE
        "${CMAKE_CURRENT_SOURCE_DIR}/build/emsdk/upstream/emscripten/cmake/Modules/Platform/\
Emscripten.cmake"
    )
endif()

project(
    clp-ffi-js
    LANGUAGES
        C
        CXX
    VERSION 0.1.0
)

# Enforce "Unix Makefiles" because "Ninja" does not work with the Emscripten toolchain on CXX_20
# sources.
if(NOT CMAKE_GENERATOR MATCHES "Unix Makefiles")
    message(
        FATAL_ERROR
        "This project is intended to be built with Unix Makefiles on a Unix system."
    )
endif()

# Enable exporting compile commands
set(CMAKE_EXPORT_COMPILE_COMMANDS
    ON
    CACHE BOOL
    "Enable/Disable output of compile commands during generation."
    FORCE
)

# Disable response files since `clang-tidy` doesn't seem to be able to use them
set(CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES OFF)

# Set the default build type to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CLP_FFI_JS_DEFAULT_BUILD_TYPE "Release")
    message(STATUS "No build type specified. Setting to '${CLP_FFI_JS_DEFAULT_BUILD_TYPE}'.")
    set(CMAKE_BUILD_TYPE
        "${CLP_FFI_JS_DEFAULT_BUILD_TYPE}"
        CACHE STRING
        "Choose the type of build."
        FORCE
    )
endif()

# Download and extract Boost
set(CLP_FFI_JS_BOOST_VERSION "1.85.0" CACHE STRING "Version of Boost library to use.")
string(REPLACE "." "_" CLP_FFI_JS_BOOST_ARCHIVE_VERSION_PART ${CLP_FFI_JS_BOOST_VERSION})
if(${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.24)
    # Sets DOWNLOAD_EXTRACT_TIMESTAMP=ON in FetchContent_Declare()
    cmake_policy(SET CMP0135 NEW)
endif()
FetchContent_Declare(
    Boost
    URL
        "https://archives.boost.io/release/${CLP_FFI_JS_BOOST_VERSION}/source/\
boost_${CLP_FFI_JS_BOOST_ARCHIVE_VERSION_PART}.tar.gz"
    URL_MD5 "53aeccc3167909ee770e34469f8dd592"
)
message(STATUS "Fetching Boost.")
FetchContent_MakeAvailable(Boost)
message("Boost sources successfully fetched into ${boost_SOURCE_DIR}")

set(CLP_FFI_JS_BIN_NAME
    "ClpFfiJs"
    CACHE STRING
    "Binary name for the generated .js and .wasm files."
)
add_executable(${CLP_FFI_JS_BIN_NAME})

target_compile_features(${CLP_FFI_JS_BIN_NAME} PRIVATE cxx_std_20)

set(CMAKE_EXECUTABLE_SUFFIX ".js" CACHE STRING "Binary type to be generated by Emscripten.")

if(CMAKE_BUILD_TYPE MATCHES "Release")
    set(CLP_FFI_JS_EXTRA_LINKER_FLAGS
        -flto
        --closure=1
        -sENVIRONMENT=worker
    )
else()
    set(CLP_FFI_JS_EXTRA_LINKER_FLAGS -sENVIRONMENT=node)
endif()
message(
    "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}: Extra linker flags: ${CLP_FFI_JS_EXTRA_LINKER_FLAGS}"
)
target_link_options(
    ${CLP_FFI_JS_BIN_NAME}
    PRIVATE
        ${CLP_FFI_JS_EXTRA_LINKER_FLAGS}
        -sALLOW_MEMORY_GROWTH
        -sEXPORT_ES6
        -sMODULARIZE
        -sWASM_BIGINT
        --emit-tsd ${CLP_FFI_JS_BIN_NAME}.d.ts
)
target_link_libraries(${CLP_FFI_JS_BIN_NAME} PRIVATE embind)

target_compile_definitions(${CLP_FFI_JS_BIN_NAME} PUBLIC SPDLOG_FMT_EXTERNAL=1)

# NOTE: We mark the include directories below as system headers so that the compiler (including
# `clang-tidy`) doesn't generate warnings from them.
target_include_directories(
    ${CLP_FFI_JS_BIN_NAME}
    SYSTEM
    PRIVATE
        ${boost_SOURCE_DIR}
        src/submodules/clp/components/core/src
        src/submodules/clp/components/core/src/clp
        src/submodules/clp/components/core/submodules
        src/submodules/fmt/include
        src/submodules/spdlog/include
        src/submodules/zstd/lib
)

target_include_directories(${CLP_FFI_JS_BIN_NAME} PRIVATE src/)

set(CLP_FFI_JS_SRC_MAIN src/clp_ffi_js/ir/StreamReader.cpp)

set(CLP_FFI_JS_SRC_CLP_CORE
    src/submodules/clp/components/core/src/clp/ffi/ir_stream/decoding_methods.cpp
    src/submodules/clp/components/core/src/clp/ir/EncodedTextAst.cpp
    src/submodules/clp/components/core/src/clp/ir/LogEventDeserializer.cpp
    src/submodules/clp/components/core/src/clp/ReadOnlyMemoryMappedFile.cpp
    src/submodules/clp/components/core/src/clp/ReaderInterface.cpp
    src/submodules/clp/components/core/src/clp/streaming_compression/zstd/Decompressor.cpp
    src/submodules/clp/components/core/src/clp/TimestampPattern.cpp
)

set(CLP_FFI_JS_SRC_FMT src/submodules/fmt/src/format.cc)

set(CLP_FFI_JS_SRC_ZSTD
    src/submodules/zstd/lib/common/entropy_common.c
    src/submodules/zstd/lib/common/error_private.c
    src/submodules/zstd/lib/common/fse_decompress.c
    src/submodules/zstd/lib/common/zstd_common.c
    src/submodules/zstd/lib/common/zstd_trace.c
    src/submodules/zstd/lib/common/xxhash.c
    src/submodules/zstd/lib/decompress/huf_decompress.c
    src/submodules/zstd/lib/decompress/zstd_ddict.c
    src/submodules/zstd/lib/decompress/zstd_decompress_block.c
    src/submodules/zstd/lib/decompress/zstd_decompress.c
)

target_sources(
    ${CLP_FFI_JS_BIN_NAME}
    PRIVATE
        ${CLP_FFI_JS_SRC_MAIN}
        ${CLP_FFI_JS_SRC_CLP_CORE}
        ${CLP_FFI_JS_SRC_FMT}
        ${CLP_FFI_JS_SRC_ZSTD}
)
